// https://github.com/electron/electron/issues/21437#issuecomment-573522360
// https://www.electronjs.org/docs/api/ipc-renderer
// https://www.electronjs.org/docs/tutorial/context-isolation#context-isolation
// https://www.electronjs.org/docs/api/context-bridge

import { contextBridge, ipcRenderer } from 'electron'

// TODO: Could use types here for parameters. These can be autogenerated from the proto files,
//       but I'd need to build that into the workflow. For now this is good enough. This is the
//       third time I'm translating this API. Once from Summit RC+S to gRPC, once from gRPC to
//       node (autogenerated), once from node to electron (only types automated).

contextBridge.exposeInMainWorld('bridgeManagerService', {
  listBridges: async (request: any): Promise<any> => {
    return await ipcRenderer.invoke('list-bridges', request)
  }
})

contextBridge.exposeInMainWorld('deviceManagerService', {
  streamTimeDomains: (request: any, callback: any): void => {
    ipcRenderer.send('stream-timedomains', request)
    ipcRenderer.on('stream-update', (_, resp) => callback(resp))
  }
})

contextBridge.exposeInMainWorld('appService', {
  getBridges: (): any => {
    return ipcRenderer.invoke('get-bridges')
  }
})